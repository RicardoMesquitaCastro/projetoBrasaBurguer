{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import Platform from\"react-native-web/dist/exports/Platform\";import NativeModules from\"react-native-web/dist/exports/NativeModules\";var AuthenticationToken=NativeModules.FBAuthenticationToken;var FBAuthenticationToken=function(){function FBAuthenticationToken(tokenMap){_classCallCheck(this,FBAuthenticationToken);_defineProperty(this,\"authenticationToken\",void 0);_defineProperty(this,\"nonce\",void 0);_defineProperty(this,\"graphDomain\",void 0);this.authenticationToken=tokenMap.authenticationToken;this.nonce=tokenMap.nonce;this.graphDomain=tokenMap.graphDomain;Object.freeze(this);}_createClass(FBAuthenticationToken,null,[{key:\"getAuthenticationTokenIOS\",value:function getAuthenticationTokenIOS(){if(Platform.OS==='android'){return Promise.resolve(null);}return new Promise(function(resolve){AuthenticationToken.getAuthenticationToken(function(tokenMap){if(tokenMap){resolve(new FBAuthenticationToken(tokenMap));}else{resolve(null);}});});}}]);return FBAuthenticationToken;}();export default FBAuthenticationToken;","map":{"version":3,"sources":["FBAuthenticationToken.ts"],"names":["AuthenticationToken","NativeModules","constructor","tokenMap","Object","getAuthenticationTokenIOS","Platform","Promise","resolve"],"mappings":"0bAKA,GAAMA,CAAAA,mBAAmB,CAAGC,aAAa,CAAzC,qBAAA,C,GAWA,CAAA,qB,YAgBEC,+BAAW,QAAXA,CAA8C,6CAAA,eAAA,CAAA,IAAA,CAAA,qBAAA,CAAA,IAAA,EAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,OAAA,CAAA,IAAA,EAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,aAAA,CAAA,IAAA,EAAA,CAAA,CAC5C,KAAA,mBAAA,CAA2BC,QAAQ,CAAnC,mBAAA,CACA,KAAA,KAAA,CAAaA,QAAQ,CAArB,KAAA,CACA,KAAA,WAAA,CAAmBA,QAAQ,CAA3B,WAAA,CACAC,MAAM,CAANA,MAAAA,CAAAA,IAAAA,EACD,C,gFAKMC,oCAA4B,CACjC,GAAIC,QAAQ,CAARA,EAAAA,GAAJ,SAAA,CAA+B,CAC7B,MAAOC,CAAAA,OAAO,CAAPA,OAAAA,CAAP,IAAOA,CAAP,CACD,CACD,MAAO,IAAA,CAAA,OAAA,CAA2CC,SAAAA,OAAD,CAAa,CAC5DR,mBAAmB,CAAnBA,sBAAAA,CACGG,SAAAA,QAAD,CAAsC,CACpC,GAAA,QAAA,CAAc,CACZK,OAAO,CAAC,GAAA,CAAA,qBAAA,CAARA,QAAQ,CAAD,CAAPA,CADF,CAAA,IAEO,CACLA,OAAO,CAAPA,IAAO,CAAPA,CACD,CANLR,CAAAA,EADF,CAAO,CAAP,CAWD,C,qCAGH,cAAA,CAAA,qBAAA","sourcesContent":["/**\n * @format\n */\nimport {Platform, NativeModules} from 'react-native';\n\nconst AuthenticationToken = NativeModules.FBAuthenticationToken;\n\nexport type AuthenticationTokenMap = {\n  authenticationToken: string;\n  nonce: string;\n  graphDomain: string;\n};\n\n/**\n * Represents an immutable access token for using Facebook services.\n */\nclass FBAuthenticationToken {\n  /**\n     The raw token string from the authentication response\n    */\n  authenticationToken: string;\n\n  /**\n     The nonce from the decoded authentication response\n    */\n  nonce: string;\n\n  /**\n    The graph domain where the user is authenticated.\n   */\n  graphDomain: string;\n\n  constructor(tokenMap: AuthenticationTokenMap) {\n    this.authenticationToken = tokenMap.authenticationToken;\n    this.nonce = tokenMap.nonce;\n    this.graphDomain = tokenMap.graphDomain;\n    Object.freeze(this);\n  }\n\n  /**\n   * Getter for the authentication token\n   */\n  static getAuthenticationTokenIOS() {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(null);\n    }\n    return new Promise<FBAuthenticationToken | null>((resolve) => {\n      AuthenticationToken.getAuthenticationToken(\n        (tokenMap: AuthenticationTokenMap) => {\n          if (tokenMap) {\n            resolve(new FBAuthenticationToken(tokenMap));\n          } else {\n            resolve(null);\n          }\n        },\n      );\n    });\n  }\n}\n\nexport default FBAuthenticationToken;\n"]},"metadata":{},"sourceType":"module"}