{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});function areInputsEqual(newInputs,lastInputs){for(var i=0;i<newInputs.length;i++){if(newInputs[i]!==lastInputs[i]){return false;}}return true;}var lastArgs=[];var lastResult=0;function mergeExtraData(){for(var _len=arguments.length,newArgs=new Array(_len),_key=0;_key<_len;_key++){newArgs[_key]=arguments[_key];}if(areInputsEqual(newArgs,lastArgs)){return lastResult;}lastResult=lastResult===10?0:lastResult+1;lastArgs=newArgs;return lastResult;}exports.default=mergeExtraData;","map":{"version":3,"sources":["C:/Users/ricar/OneDrive/Área de Trabalho/myBuild/node_modules/react-native-app-intro-slider/dist/merge-extradata.js"],"names":["Object","defineProperty","exports","value","areInputsEqual","newInputs","lastInputs","i","length","lastArgs","lastResult","mergeExtraData","newArgs","default"],"mappings":"AAAA,aACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA+B,YAA/B,CAA6C,CAAEC,KAAK,CAAE,IAAT,CAA7C,EACA,QAASC,CAAAA,cAAT,CAAwBC,SAAxB,CAAmCC,UAAnC,CAA+C,CAG3C,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,SAAS,CAACG,MAA9B,CAAsCD,CAAC,EAAvC,CAA2C,CAEvC,GAAIF,SAAS,CAACE,CAAD,CAAT,GAAiBD,UAAU,CAACC,CAAD,CAA/B,CAAoC,CAChC,MAAO,MAAP,CACH,CACJ,CACD,MAAO,KAAP,CACH,CACD,GAAIE,CAAAA,QAAQ,CAAG,EAAf,CACA,GAAIC,CAAAA,UAAU,CAAG,CAAjB,CACA,QAASC,CAAAA,cAAT,EAAoC,+BAATC,OAAS,0CAATA,OAAS,wBAChC,GAAIR,cAAc,CAACQ,OAAD,CAAUH,QAAV,CAAlB,CAAuC,CACnC,MAAOC,CAAAA,UAAP,CACH,CAEDA,UAAU,CAAGA,UAAU,GAAK,EAAf,CAAoB,CAApB,CAAwBA,UAAU,CAAG,CAAlD,CACAD,QAAQ,CAAGG,OAAX,CACA,MAAOF,CAAAA,UAAP,CACH,CACDR,OAAO,CAACW,OAAR,CAAkBF,cAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction areInputsEqual(newInputs, lastInputs) {\n    // Using for loop for speed. It generally performs better than array.every\n    // https://github.com/alexreardon/memoize-one/pull/59\n    for (let i = 0; i < newInputs.length; i++) {\n        // using shallow equality check\n        if (newInputs[i] !== lastInputs[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nlet lastArgs = [];\nlet lastResult = 0;\nfunction mergeExtraData(...newArgs) {\n    if (areInputsEqual(newArgs, lastArgs)) {\n        return lastResult;\n    }\n    // Something shallowly changed - return a new number from [0-10]\n    lastResult = lastResult === 10 ? 0 : lastResult + 1;\n    lastArgs = newArgs;\n    return lastResult;\n}\nexports.default = mergeExtraData;\n"]},"metadata":{},"sourceType":"script"}