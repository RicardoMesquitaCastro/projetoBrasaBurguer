{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\n\nvar LoginButton = function (_React$Component) {\n  _inherits(LoginButton, _React$Component);\n\n  var _super = _createSuper(LoginButton);\n\n  function LoginButton() {\n    _classCallCheck(this, LoginButton);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LoginButton, [{\n    key: \"_eventHandler\",\n    value: function _eventHandler(event) {\n      if (typeof event !== 'object' || !event || !event.nativeEvent) {\n        return;\n      }\n\n      var eventDict = event.nativeEvent;\n\n      if (eventDict.type === 'loginFinished') {\n        if (this.props.onLoginFinished) {\n          this.props.onLoginFinished(eventDict.error, eventDict.result);\n        }\n      } else if (eventDict.type === 'logoutFinished') {\n        if (this.props.onLogoutFinished) {\n          this.props.onLogoutFinished();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(RCTFBLoginButton, _extends({}, this.props, {\n        onChange: this._eventHandler.bind(this)\n      }));\n    }\n  }]);\n\n  return LoginButton;\n}(React.Component);\n\n_defineProperty(LoginButton, \"defaultProps\", void 0);\n\nvar styles = StyleSheet.create({\n  defaultButtonStyle: {\n    height: 30,\n    width: 190\n  }\n});\nLoginButton.defaultProps = {\n  style: styles.defaultButtonStyle\n};\nvar RCTFBLoginButton = requireNativeComponent('RCTFBLoginButton');\nexport default LoginButton;","map":{"version":3,"sources":["FBLoginButton.tsx"],"names":["LoginButton","React","_eventHandler","event","eventDict","render","styles","defaultButtonStyle","height","width","style","RCTFBLoginButton","requireNativeComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAAO,KAAP,KAAA,MAAA,OAAA;SACA,sB;;;IAcA,W;;;;;;;;;;;;;WAgEEE,uBAAa,KAAbA,EAA4B;AAC1B,UAAI,OAAA,KAAA,KAAA,QAAA,IAA6B,CAA7B,KAAA,IAAuC,CAACC,KAAK,CAAjD,WAAA,EAA+D;AAC7D;AACD;;AACD,UAAMC,SAAS,GAAGD,KAAK,CAAvB,WAAA;;AACA,UAAIC,SAAS,CAATA,IAAAA,KAAJ,eAAA,EAAwC;AACtC,YAAI,KAAA,KAAA,CAAJ,eAAA,EAAgC;AAC9B,eAAA,KAAA,CAAA,eAAA,CAA2BA,SAAS,CAApC,KAAA,EAA4CA,SAAS,CAArD,MAAA;AACD;AAHH,OAAA,MAIO,IAAIA,SAAS,CAATA,IAAAA,KAAJ,gBAAA,EAAyC;AAC9C,YAAI,KAAA,KAAA,CAAJ,gBAAA,EAAiC;AAC/B,eAAA,KAAA,CAAA,gBAAA;AACD;AACF;AACF;;;WAEDC,kBAAS;AACP,aACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,QAAA,CAAA,EAAA,EACM,KADN,KAAA,EAAA;AAEE,QAAA,QAAQ,EAAE,KAAA,aAAA,CAAA,IAAA,CAAA,IAAA;AAFZ,OAAA,CAAA,CADF;AAMD;;;;EAvFuBJ,KAAK,CAA/B,S;;gBAAMD,W;;AA0FN,IAAMM,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BC,EAAAA,kBAAkB,EAAE;AAClBC,IAAAA,MAAM,EADY,EAAA;AAElBC,IAAAA,KAAK,EAAE;AAFW;AADW,CAAlB,CAAf;AAOAT,WAAW,CAAXA,YAAAA,GAA2B;AACzBU,EAAAA,KAAK,EAAEJ,MAAM,CAACC;AADW,CAA3BP;AAQA,IAAMW,gBAAgB,GACpBC,sBAAsB,CADxB,kBACwB,CADxB;AAGA,eAAA,WAAA","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @format\n */\nimport {\n  DefaultAudience,\n  LoginBehaviorAndroid,\n  LoginResult,\n  LoginTracking,\n} from './FBLoginManager';\nimport {PropsOf} from './utils';\nimport * as React from 'react';\nimport {requireNativeComponent, StyleSheet, ViewStyle} from 'react-native';\n\nexport type Event = {\n  nativeEvent?: {\n    type?: 'loginFinished' | 'logoutFinished';\n    error: Record<string, unknown>;\n    result: LoginResult;\n  };\n};\nexport type TooltipBehaviorIOS = 'auto' | 'force_display' | 'disable';\n\n/**\n * A button that initiates a log in or log out flow upon tapping.\n */\nclass LoginButton extends React.Component<{\n  /**\n   * Represents the permissions to request when the login button\n   * is pressed.\n   */\n  permissions?: Array<string>;\n\n  /**\n   * The callback invoked upon error/completion of a login request.\n   */\n  onLoginFinished?: (\n    error: Record<string, unknown>,\n    result: LoginResult,\n  ) => void;\n\n  /**\n   * The callback invoked upon completion of a logout request.\n   */\n  onLogoutFinished?: () => void;\n\n  /**\n   * The behavior to use when attempting a login.\n   * @platform android\n   */\n  loginBehaviorAndroid?: LoginBehaviorAndroid;\n\n  /**\n   * The default audience to target when attempting a login.\n   */\n  defaultAudience?: DefaultAudience;\n\n  /**\n   * For iOS only, the desired tooltip behavior.\n   * @platform ios\n   */\n  tooltipBehaviorIOS?: TooltipBehaviorIOS;\n\n  /**\n   * Gets or sets an optional nonce to use for login attempts. A valid nonce must be a non-empty string without\n   * whitespace. An invalid nonce will not be set. Instead, default unique nonces will be used for login attempts.\n   * @platform ios\n   */\n  nonceIOS?: string;\n\n  /**\n   * Gets or sets the desired tracking preference to use for login attempts. Defaults to `enabled`\n   * @platform ios\n   */\n  loginTrackingIOS?: LoginTracking;\n\n  /**\n   * View style, if any.\n   */\n  style?: ViewStyle;\n\n  /**\n   * testID, if any.\n   */\n  testID?: string;\n}> {\n  static defaultProps: {\n    style: typeof styles.defaultButtonStyle;\n  };\n\n  _eventHandler(event: Event) {\n    if (typeof event !== 'object' || !event || !event.nativeEvent) {\n      return;\n    }\n    const eventDict = event.nativeEvent;\n    if (eventDict.type === 'loginFinished') {\n      if (this.props.onLoginFinished) {\n        this.props.onLoginFinished(eventDict.error, eventDict.result);\n      }\n    } else if (eventDict.type === 'logoutFinished') {\n      if (this.props.onLogoutFinished) {\n        this.props.onLogoutFinished();\n      }\n    }\n  }\n\n  render() {\n    return (\n      <RCTFBLoginButton\n        {...this.props}\n        onChange={this._eventHandler.bind(this)}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  defaultButtonStyle: {\n    height: 30,\n    width: 190,\n  },\n});\n\nLoginButton.defaultProps = {\n  style: styles.defaultButtonStyle,\n};\n\ntype RCTFBLoginButtonProps = PropsOf<LoginButton> & {\n  onChange: (event: Event) => void;\n};\n\nconst RCTFBLoginButton =\n  requireNativeComponent<RCTFBLoginButtonProps>('RCTFBLoginButton');\n\nexport default LoginButton;\n"]},"metadata":{},"sourceType":"module"}