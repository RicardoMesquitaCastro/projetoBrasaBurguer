{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport MapView, { Marker } from 'react-native-maps';\n\nvar _Dimensions$get = Dimensions.get('window'),\n    height = _Dimensions$get.height,\n    width = _Dimensions$get.width;\n\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { Geolocation } from 'react-native-location';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Address = function (_Component) {\n  _inherits(Address, _Component);\n\n  var _super = _createSuper(Address);\n\n  function Address(props) {\n    var _this;\n\n    _classCallCheck(this, Address);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      data: \"\",\n      latitude: -17.303629,\n      longitude: -48.279743\n    };\n    return _this;\n  }\n\n  _createClass(Address, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _jsxs(View, {\n        style: {\n          flex: 1,\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: [_jsx(MapView, {\n          style: {\n            width: width,\n            height: height - 60\n          },\n          region: {\n            latitude: this.state.latitude,\n            longitude: this.state.longitude,\n            latitudeDelta: 0.0042,\n            longitudeDelta: 0.0121\n          },\n          onPress: function onPress(e) {\n            return _this2.onClickMap(e.nativeEvent);\n          },\n          children: _jsx(MapView.Marker, {\n            draggable: true,\n            coordinate: {\n              latitude: this.state.latitude,\n              longitude: this.state.longitude\n            },\n            onDragEnd: function onDragEnd(e) {\n              return _this2.movementMarker(e.nativeEvent);\n            },\n            title: \"Here\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: {\n            backgroundColor: \"white\",\n            height: 60,\n            width: 60,\n            borderRadius: 50,\n            alignItems: 'center',\n            padding: 5,\n            position: \"absolute\",\n            top: 50,\n            right: 10\n          },\n          onPress: function onPress() {\n            return _this2._getLocation();\n          },\n          children: _jsx(Icon, {\n            name: \"md-locate\",\n            size: 50,\n            color: \"gray\"\n          })\n        })]\n      });\n    }\n  }, {\n    key: \"_getLocation\",\n    value: function _getLocation() {\n      var _this3 = this;\n\n      Geolocation.getCurrentPosition(function (info) {\n        _this3.setState({\n          latitude: info.coords.latitude,\n          longitude: info.coords.longitude\n        });\n      }, function (error) {\n        console.log(JSON.stringify(error));\n      });\n    }\n  }, {\n    key: \"movementMarker\",\n    value: function movementMarker(e) {\n      var _e$coordinate = e.coordinate,\n          latitude = _e$coordinate.latitude,\n          longitude = _e$coordinate.longitude;\n      this.setState({\n        latitude: latitude,\n        longitude: longitude\n      });\n    }\n  }, {\n    key: \"onClickMap\",\n    value: function onClickMap(e) {\n      var _e$coordinate2 = e.coordinate,\n          latitude = _e$coordinate2.latitude,\n          longitude = _e$coordinate2.longitude;\n      this.setState({\n        latitude: latitude,\n        longitude: longitude\n      });\n    }\n  }]);\n\n  return Address;\n}(Component);\n\nexport { Address as default };","map":{"version":3,"sources":["C:/Users/ricar/OneDrive/√Årea de Trabalho/myBuild api rodando/pages/Address.js"],"names":["React","Component","MapView","Marker","Dimensions","get","height","width","Icon","Geolocation","Address","props","state","data","latitude","longitude","flex","alignItems","justifyContent","latitudeDelta","longitudeDelta","e","onClickMap","nativeEvent","movementMarker","backgroundColor","borderRadius","padding","position","top","right","_getLocation","getCurrentPosition","info","setState","coords","error","console","log","JSON","stringify","coordinate"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Text, View, TextInput, Dimensions, TouchableOpacity } from 'react-native';\r\n\r\nimport MapView, { Marker } from 'react-native-maps';\r\nvar {height, width } = Dimensions.get('window');\r\nimport Icon from 'react-native-vector-icons/Ionicons';\r\n\r\n//import Geolocation from '@react-native-community/geolocation';\r\nimport {Geolocation}from 'react-native-location';\r\nexport default class Address extends Component {\r\n\r\n  constructor(props) {\r\n     super(props);\r\n     this.state = {\r\n       data:\"\",\r\n       latitude:-17.303629,\r\n       longitude: -48.279743\r\n     };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View style={{flex:1,alignItems: 'center', justifyContent: 'center'}}>\r\n\r\n           <MapView\r\n           style={{width:width, height:height-60}}\r\n            region={{\r\n              latitude:  this.state.latitude,\r\n              longitude: this.state.longitude,\r\n              latitudeDelta: 0.0042,\r\n              longitudeDelta: 0.0121,\r\n            }}\r\n            onPress={(e) => this.onClickMap(e.nativeEvent)}\r\n\r\n          >\r\n\r\n\r\n\r\n          <MapView.Marker draggable\r\n            coordinate={{\r\n              latitude: this.state.latitude,\r\n              longitude: this.state.longitude\r\n            }}\r\n            onDragEnd={(e) => this.movementMarker(e.nativeEvent)}\r\n            title=\"Here\"  />\r\n        </MapView>\r\n\r\n        <TouchableOpacity style={{\r\n            backgroundColor:\"white\",\r\n            height:60, width:60,\r\n            borderRadius:50,\r\n            alignItems:'center',\r\n            padding:5,\r\n            position:\"absolute\",\r\n            top :50 ,\r\n            right:10\r\n          }} onPress={()=>this._getLocation()}>\r\n          <Icon name=\"md-locate\" size={50} color={\"gray\"}  />\r\n        </TouchableOpacity>\r\n\r\n      </View>\r\n    );\r\n  }\r\n\r\n  _getLocation()\r\n  {\r\n    Geolocation.getCurrentPosition((info) => {\r\n      this.setState({\r\n        latitude: info.coords.latitude,\r\n        longitude: info.coords.longitude,\r\n      })\r\n    },(error)=>{\r\n      console.log(JSON.stringify(error))\r\n    })\r\n  }\r\n\r\n  movementMarker(e){\r\n    // get coordinate from mapviews\r\n    const { latitude, longitude } = e.coordinate\r\n    // update coordinate\r\n    this.setState({\r\n      latitude: latitude,\r\n      longitude: longitude\r\n    })\r\n  }\r\n\r\n  onClickMap(e)\r\n {\r\n   const {latitude,longitude} = e.coordinate\r\n   this.setState({\r\n     latitude: latitude,\r\n     longitude: longitude\r\n   })\r\n }\r\n\r\n}\r\n/*import React, { Component } from 'react';\r\nimport { Text, View, TextInput,Dimensions, TouchableOpacity } from 'react-native';\r\n import MapView  from 'react-native-maps';\r\n import { Marker } from 'react-native-maps';\r\n var {height, width } = Dimensions.get('window');\r\nexport default class Address extends Component {\r\n  constructor(props) {\r\n     super(props);\r\n     this.state = {\r\n       data:\"\",\r\n       latitude:-17.303629,\r\n       longitude: -48.279743\r\n     };\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <View style={{flex:1,alignItems: 'center', justifyContent: 'center'}}>\r\n        \r\n         <MapView\r\n           style={{width:width, height:height-60}}\r\n            initialRegion={{\r\n              latitude:  this.state.latitude,\r\n              longitude: this.state.longitude,\r\n              latitudeDelta: 0.0042,\r\n              longitudeDelta: 0.0121,\r\n            }}\r\n            \r\n          >\r\n          <MapView.Marker draggable\r\n            coordinate={{\r\n              latitude: this.state.latitude,\r\n              longitude: this.state.longitude\r\n            }}\r\n            title=\"Minha localiza√ß√£o\"\r\n            onDragEnd={(e) => this.movementMarker(e)}\r\n          />\r\n          </MapView>\r\n      </View>\r\n      \r\n    );\r\n  }\r\n  movementMarker(e){\r\n    //get (pega) coordenada de mapview\r\n    const latitude  = e.nativeEvent.coordinate.latitude\r\n    const longitude = e.nativeEvent.coordinate.longitude\r\n    \r\n    //atualiza coordenada\r\n    this.setState({\r\n      latitude: latitude,\r\n      longitude: longitude\r\n    })\r\n  }\r\n}*/"]},"metadata":{},"sourceType":"module"}