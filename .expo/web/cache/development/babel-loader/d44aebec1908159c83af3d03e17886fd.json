{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { isDefined, isNumber, isOneOf, isString } from \"./util/validate\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar AppEventsLogger = NativeModules.FBAppEventsLogger;\n\nvar _ref = (AppEventsLogger === null || AppEventsLogger === void 0 ? void 0 : AppEventsLogger.getConstants()) || {},\n    AppEvents = _ref.AppEvents,\n    AppEventParams = _ref.AppEventParams;\n\nexport default {\n  setFlushBehavior: function setFlushBehavior(flushBehavior) {\n    AppEventsLogger.setFlushBehavior(flushBehavior);\n  },\n  logEvent: function logEvent(eventName) {\n    var valueToSum = 0;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (typeof args[0] === 'number') {\n      valueToSum = Number(args.shift());\n    }\n\n    var parameters = null;\n\n    if (typeof args[0] === 'object') {\n      parameters = args[0];\n    }\n\n    AppEventsLogger.logEvent(eventName, valueToSum, parameters);\n  },\n  logPurchase: function logPurchase(purchaseAmount, currencyCode, parameters) {\n    AppEventsLogger.logPurchase(purchaseAmount, currencyCode, parameters);\n  },\n  logPushNotificationOpen: function logPushNotificationOpen(payload) {\n    AppEventsLogger.logPushNotificationOpen(payload);\n  },\n  logProductItem: function logProductItem(itemID, availability, condition, description, imageLink, link, title, priceAmount, currency, gtin, mpn, brand, parameters) {\n    if (!isDefined(itemID) || !isString(itemID)) {\n      throw new Error(\"logProductItem expected 'itemID' to be a string\");\n    }\n\n    if (!isDefined(availability) || !isOneOf(availability, ['in_stock', 'out_of_stock', 'preorder', 'avaliable_for_order', 'discontinued'])) {\n      throw new Error(\"logProductItem expected 'availability' to be one of 'in_stock' | 'out_of_stock' | 'preorder' | 'avaliable_for_order' | 'discontinued'\");\n    }\n\n    if (!isDefined(condition) || !isOneOf(condition, ['new', 'refurbished', 'used'])) {\n      throw new Error(\"logProductItem expected 'condition' to be one of 'new' | 'refurbished' | 'used'\");\n    }\n\n    if (!isDefined(description) || !isString(description)) {\n      throw new Error(\"logProductItem expected 'description' to be a string\");\n    }\n\n    if (!isDefined(imageLink) || !isString(imageLink)) {\n      throw new Error(\"logProductItem expected 'imageLink' to be a string\");\n    }\n\n    if (!isDefined(link) || !isString(link)) {\n      throw new Error(\"logProductItem expected 'link' to be a string\");\n    }\n\n    if (!isDefined(title) || !isString(title)) {\n      throw new Error(\"logProductItem expected 'title' to be a string\");\n    }\n\n    if (!isDefined(priceAmount) || !isNumber(priceAmount)) {\n      throw new Error(\"logProductItem expected 'priceAmount' to be a number\");\n    }\n\n    if (!isDefined(currency) || !isString(currency)) {\n      throw new Error(\"logProductItem expected 'currency' to be a string\");\n    }\n\n    if (!isDefined(gtin) && !isDefined(mpn) && !isDefined(brand)) {\n      throw new Error('logProductItem expected either gtin, mpn or brand to be defined');\n    }\n\n    AppEventsLogger.logProductItem(itemID, availability, condition, description, imageLink, link, title, priceAmount, currency, gtin, mpn, brand, parameters);\n  },\n  flush: function flush() {\n    AppEventsLogger.flush();\n  },\n  setUserID: function setUserID(userID) {\n    if (userID === null && Platform.OS === 'android') {\n      AppEventsLogger.clearUserID();\n      return;\n    }\n\n    AppEventsLogger.setUserID(userID);\n  },\n  clearUserID: function clearUserID() {\n    AppEventsLogger.clearUserID();\n  },\n  getUserID: function getUserID() {\n    return function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AppEventsLogger.getUserID());\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getAnonymousID: function getAnonymousID() {\n    return function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(AppEventsLogger.getAnonymousID());\n\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getAdvertiserID: function getAdvertiserID() {\n    return function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(AppEventsLogger.getAdvertiserID());\n\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getAttributionID: function getAttributionID() {\n    return function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(Platform.OS === 'ios')) {\n                _context4.next = 2;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", null);\n\n            case 2:\n              _context4.next = 4;\n              return _regeneratorRuntime.awrap(AppEventsLogger.getAttributionID());\n\n            case 4:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  setUserData: function setUserData(userData) {\n    AppEventsLogger.setUserData(userData);\n  },\n  setPushNotificationsDeviceToken: function setPushNotificationsDeviceToken(deviceToken) {\n    AppEventsLogger.setPushNotificationsDeviceToken(deviceToken);\n  },\n  setPushNotificationsRegistrationId: function setPushNotificationsRegistrationId(registrationId) {\n    AppEventsLogger.setPushNotificationsRegistrationId(registrationId);\n  },\n  AppEvents: AppEvents,\n  AppEventParams: AppEventParams\n};","map":{"version":3,"sources":["FBAppEventsLogger.ts"],"names":["AppEventsLogger","NativeModules","AppEventParams","setFlushBehavior","logEvent","args","valueToSum","Number","parameters","logPurchase","logPushNotificationOpen","logProductItem","isDefined","isString","isOneOf","isNumber","flush","setUserID","userID","Platform","clearUserID","setUserData","setPushNotificationsDeviceToken","setPushNotificationsRegistrationId","AppEvents"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @format\n */\nimport {isDefined, isNumber, isOneOf, isString} from './util/validate';\nimport {NativeModules} from 'react-native';\nimport {Platform} from 'react-native';\n\nconst AppEventsLogger = NativeModules.FBAppEventsLogger;\n\n/**\n * Controls when an AppEventsLogger sends log events to the server\n */\nexport type AppEventsFlushBehavior =\n  /**\n   * Flush automatically: periodically (every 15 seconds or after every 100 events), and\n   * always at app reactivation. This is the default value.\n   */\n  | 'auto'\n  /**\n   * Only flush when AppEventsLogger.flush() is explicitly invoked.\n   */\n  | 'explicit_only';\n\n/**\n * Specifies product availability for Product Catalog product item update\n */\nexport type ProductAvailability =\n  /**\n   * Item ships immediately\n   */\n  | 'in_stock'\n  /**\n   * No plan to restock\n   */\n  | 'out_of_stock'\n  /**\n   * Available in future\n   */\n  | 'preorder'\n  /**\n   * Ships in 1-2 weeks\n   */\n  | 'avaliable_for_order'\n  /**\n   * Discontinued\n   */\n  | 'discontinued';\n\n/**\n * Specifies product condition for Product Catalog product item update\n */\nexport type ProductCondition = 'new' | 'refurbished' | 'used';\n\nexport type Params = {[key: string]: string | number};\n\n/**\n * Info about a user to increase chances of matching a Facebook user.\n * See https://developers.facebook.com/docs/app-events/advanced-matching for\n * more info about the expected format of each field.\n */\nexport type UserData = Readonly<{\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  phone?: string;\n  dateOfBirth?: string;\n  gender?: 'm' | 'f';\n  city?: string;\n  state?: string;\n  zip?: string;\n  country?: string;\n}>;\n\nexport type AppEvent = {\n  AchievedLevel: string;\n  AdClick: string;\n  AdImpression: string;\n  AddedPaymentInfo: string;\n  AddedToCart: string;\n  AddedToWishlist: string;\n  CompletedRegistration: string;\n  CompletedTutorial: string;\n  Contact: string;\n  CustomizeProduct: string;\n  Donate: string;\n  FindLocation: string;\n  InitiatedCheckout: string;\n  Purchased: string;\n  Rated: string;\n  Searched: string;\n  SpentCredits: string;\n  Schedule: string;\n  StartTrial: string;\n  SubmitApplication: string;\n  Subscribe: string;\n  UnlockedAchievement: string;\n  ViewedContent: string;\n};\n\nexport type AppEventParam = {\n  AddType: string;\n  Content: string;\n  ContentID: string;\n  ContentType: string;\n  Currency: string;\n  Description: string;\n  Level: string;\n  NumItems: string;\n  MaxRatingValue: string;\n  OrderId: string;\n  PaymentInfoAvailable: string;\n  RegistrationMethod: string;\n  SearchString: string;\n  Success: string;\n  ValueNo: string;\n  ValueYes: string;\n};\n\nconst {AppEvents, AppEventParams} = AppEventsLogger?.getConstants() || {};\n\nexport default {\n  /**\n   * Sets the current event flushing behavior specifying when events\n   * are sent back to Facebook servers.\n   */\n  setFlushBehavior(flushBehavior: AppEventsFlushBehavior) {\n    AppEventsLogger.setFlushBehavior(flushBehavior);\n  },\n\n  /**\n   * Logs an event with eventName and optional arguments.\n   * This function supports the following usage:\n   * logEvent(eventName: string);\n   * logEvent(eventName: string, valueToSum: number);\n   * logEvent(eventName: string, parameters: {[key:string]:string|number});\n   * logEvent(eventName: string, valueToSum: number, parameters: {[key:string]:string|number});\n   * See https://developers.facebook.com/docs/app-events/android for detail.\n   */\n  logEvent(eventName: string, ...args: Array<number | Params>) {\n    let valueToSum = 0;\n    if (typeof args[0] === 'number') {\n      valueToSum = Number(args.shift());\n    }\n    let parameters = null;\n    if (typeof args[0] === 'object') {\n      parameters = args[0];\n    }\n    AppEventsLogger.logEvent(eventName, valueToSum, parameters);\n  },\n\n  /**\n   * Logs a purchase. See http://en.wikipedia.org/wiki/ISO_4217 for currencyCode.\n   */\n  logPurchase(\n    purchaseAmount: number,\n    currencyCode: string,\n    parameters?: Params,\n  ) {\n    AppEventsLogger.logPurchase(purchaseAmount, currencyCode, parameters);\n  },\n\n  /**\n   * Logs an app event that tracks that the application was open via Push Notification.\n   */\n  logPushNotificationOpen(payload?: Record<string, string | number>) {\n    AppEventsLogger.logPushNotificationOpen(payload);\n  },\n\n  /**\n   * Uploads product catalog product item as an app event\n   * @param itemID – Unique ID for the item. Can be a variant for a product. Max size is 100.\n   * @param availability – If item is in stock. Accepted values are: in stock - Item ships immediately out of stock - No plan to restock preorder - Available in future available for order - Ships in 1-2 weeks discontinued - Discontinued\n   * @param condition – Product condition: new, refurbished or used.\n   * @param description – Short text describing product. Max size is 5000.\n   * @param imageLink – Link to item image used in ad.\n   * @param link – Link to merchant's site where someone can buy the item.\n   * @param title – Title of item.\n   * @param priceAmount – Amount of purchase, in the currency specified by the 'currency' parameter. This value will be rounded to the thousandths place (e.g., 12.34567 becomes 12.346).\n   * @param currency – Currency used to specify the amount.\n   * @param gtin – Global Trade Item Number including UPC, EAN, JAN and ISBN\n   * @param mpn – Unique manufacture ID for product\n   * @param brand – Name of the brand Note: Either gtin, mpn or brand is required.\n   * @param parameters – Optional fields for deep link specification.\n   */\n  logProductItem(\n    itemID: string,\n    availability: ProductAvailability,\n    condition: ProductCondition,\n    description: string,\n    imageLink: string,\n    link: string,\n    title: string,\n    priceAmount: number,\n    currency: string,\n    gtin?: string,\n    mpn?: string,\n    brand?: string,\n    parameters?: Params,\n  ) {\n    if (!isDefined(itemID) || !isString(itemID)) {\n      throw new Error(\"logProductItem expected 'itemID' to be a string\");\n    }\n    if (\n      !isDefined(availability) ||\n      !isOneOf(availability, [\n        'in_stock',\n        'out_of_stock',\n        'preorder',\n        'avaliable_for_order',\n        'discontinued',\n      ])\n    ) {\n      throw new Error(\n        \"logProductItem expected 'availability' to be one of 'in_stock' | 'out_of_stock' | 'preorder' | 'avaliable_for_order' | 'discontinued'\",\n      );\n    }\n    if (\n      !isDefined(condition) ||\n      !isOneOf(condition, ['new', 'refurbished', 'used'])\n    ) {\n      throw new Error(\n        \"logProductItem expected 'condition' to be one of 'new' | 'refurbished' | 'used'\",\n      );\n    }\n    if (!isDefined(description) || !isString(description)) {\n      throw new Error(\"logProductItem expected 'description' to be a string\");\n    }\n    if (!isDefined(imageLink) || !isString(imageLink)) {\n      throw new Error(\"logProductItem expected 'imageLink' to be a string\");\n    }\n    if (!isDefined(link) || !isString(link)) {\n      throw new Error(\"logProductItem expected 'link' to be a string\");\n    }\n    if (!isDefined(title) || !isString(title)) {\n      throw new Error(\"logProductItem expected 'title' to be a string\");\n    }\n    if (!isDefined(priceAmount) || !isNumber(priceAmount)) {\n      throw new Error(\"logProductItem expected 'priceAmount' to be a number\");\n    }\n    if (!isDefined(currency) || !isString(currency)) {\n      throw new Error(\"logProductItem expected 'currency' to be a string\");\n    }\n    if (!isDefined(gtin) && !isDefined(mpn) && !isDefined(brand)) {\n      throw new Error(\n        'logProductItem expected either gtin, mpn or brand to be defined',\n      );\n    }\n\n    AppEventsLogger.logProductItem(\n      itemID,\n      availability,\n      condition,\n      description,\n      imageLink,\n      link,\n      title,\n      priceAmount,\n      currency,\n      gtin,\n      mpn,\n      brand,\n      parameters,\n    );\n  },\n\n  /**\n   * Explicitly kicks off flushing of events to Facebook.\n   */\n  flush() {\n    AppEventsLogger.flush();\n  },\n\n  /**\n   * Sets a custom user ID to associate with all app events.\n   * The userID is persisted until this method is called again with a null userId\n   */\n  setUserID(userID: string | null) {\n    if (userID === null && Platform.OS === 'android') {\n      // TODO: Remove workaround once https://github.com/facebook/facebook-android-sdk/issues/1047 is released\n      AppEventsLogger.clearUserID();\n      return;\n    }\n    AppEventsLogger.setUserID(userID);\n  },\n\n  /**\n   * Clears the currently set user id.\n   * @deprecated use setUserID(null) instead\n   */\n  clearUserID() {\n    AppEventsLogger.clearUserID();\n  },\n\n  /**\n   * Returns user id or null if not set\n   */\n  async getUserID(): Promise<string | null> {\n    return await AppEventsLogger.getUserID();\n  },\n\n  /**\n   * Returns anonymous id or null if not set\n   */\n  async getAnonymousID(): Promise<string | null> {\n    return await AppEventsLogger.getAnonymousID();\n  },\n\n  /**\n   * Returns advertiser id or null if not set\n   */\n  async getAdvertiserID(): Promise<string | null> {\n    return await AppEventsLogger.getAdvertiserID();\n  },\n\n  /**\n   * Returns advertiser id or null if not set.\n   * @platform android\n   */\n  async getAttributionID(): Promise<string | null> {\n    if (Platform.OS === 'ios') {\n      return null;\n    }\n    return await AppEventsLogger.getAttributionID();\n  },\n\n  /**\n   * Set additional data about the user to increase chances of matching a Facebook user.\n   */\n  setUserData(userData: UserData) {\n    AppEventsLogger.setUserData(userData);\n  },\n\n  /**\n   * For iOS only, sets and sends device token to register the current application for push notifications.\n   * @platform ios\n   */\n  setPushNotificationsDeviceToken(deviceToken: string) {\n    AppEventsLogger.setPushNotificationsDeviceToken(deviceToken);\n  },\n\n  /**\n   * For Android only, sets and sends registration id to register the current app for push notifications.\n   * @platform Android\n   */\n  setPushNotificationsRegistrationId(registrationId: string) {\n    AppEventsLogger.setPushNotificationsRegistrationId(registrationId);\n  },\n\n  /**\n   * Predefined event names for logging events common to many apps.\n   */\n  AppEvents,\n\n  /**\n   *  Predefined event name parameters for common additional information to accompany events logged through the `logEvent`.\n   */\n  AppEventParams,\n};\n"]},"metadata":{},"sourceType":"module"}